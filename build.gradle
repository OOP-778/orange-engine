buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:5.1.0'
    }
}

defaultTasks 'clean', 'build', 'publish'

group 'com.oop.orangeengine'
def props = new Properties()
file("version.properties").withInputStream { props.load(it) }
if (project.hasProperty('mavenUsername') && project.hasProperty('mavenPassword')) {
    def formatter = new Formatter()
    version = formatter.format("%.1f", (props.getProperty("VERSION").toDouble() + 0.1))
    props.setProperty("VERSION", version.toString())
    props.store(new OutputStreamWriter(new FileOutputStream(file("version.properties"))), null)
}
version = props.getProperty("VERSION").toString()

def blacklistedProjects_COMPILE = ["Testing", "NBT", "OrangeEngine"]
def blacklistedProjects_SPIGOT = ["Particle"]

allprojects {
    repositories {

        maven { url 'https://repo.codemc.org/repository/nms/' }
        maven { url 'https://plugins.gradle.org/m2/' }
        maven { url 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/' }
        jcenter()
        mavenLocal()

    }
}

allprojects {

    if(equalsString(project.name, blacklistedProjects_COMPILE)) return

    apply plugin: 'com.github.johnrengelman.shadow'
    apply plugin: 'java'
    apply plugin: 'maven-publish'
    apply plugin: "base"
    apply plugin: "maven"

    group = "com.oop.orangeengine"
    version = rootProject.version

    dependencies {

        //Don't require Engine in Engine lmfao
        if (!project.name.equalsIgnoreCase("Engine")) {
            compileOnly project(":Engine")
        }

        if (!blacklistedProjects_SPIGOT.contains(project.name))
            compileOnly "org.spigotmc:spigot:1.8.8-R0.1-SNAPSHOT"

        compileOnly "net.md-5:bungeecord-chat:1.16-R0.1"

        compileOnly 'org.projectlombok:lombok:1.18.8'
        annotationProcessor 'org.projectlombok:lombok:1.18.8'
    }

    build {
        dependsOn shadowJar
        dependsOn publish
    }

    publish.shouldRunAfter shadowJar
    shadowJar.shouldRunAfter build

    shadowJar {
        relocate("org.nustaq", "com.oop.orangeengine.libs.nustaq")

        archiveName = "OrangeEngine-${project.name}.jar"
        destinationDirectory = file('../target')
    }

    if (!project.name.equalsIgnoreCase("testingplugin") && !project.name.equalsIgnoreCase("nbtbuilder")) {
        publishing {
            publications {
                mavenJava(MavenPublication) {
                    artifact source: file("../target/OrangeEngine-${project.name}.jar"), extension: 'jar'

                    groupId = project.group
                    artifactId = project.name.toLowerCase()
                    version = project.version

                    pom {
                        url = 'oopdevelopment.com'
                        developers {
                            developer {
                                id = 'OOP-778'
                                email = 'oskardhavel@gmail.com'
                            }
                        }

                    }
                }
            }
            repositories {
                mavenLocal()
                if (project.hasProperty('mavenUsername') && project.hasProperty('mavenPassword')) {
                    maven {
                        credentials {
                            username project.mavenUsername
                            password project.mavenPassword
                        }

                        def releasesRepoUrl = 'https://repo.codemc.org/repository/maven-releases/'
                        def snapshotsRepoUrl = 'https://repo.codemc.org/repository/maven-snapshots/'
                        url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

                    }
                }
            }
        }
    }
}

boolean equalsString(String string, List<String> list) {
    return list.stream().anyMatch { string2 ->
        string2.equalsIgnoreCase(string)
    }
}