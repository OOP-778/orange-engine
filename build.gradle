buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:5.1.0'
    }
}

defaultTasks 'clean', 'build', 'publish'

group 'com.oop.orangeengine'
version 'v1'

String[] blacklistedProjects_COMPILE = ["Testing", "NBT"]
String[] blacklistedProjects_SPIGOT = ["Particle"]

allprojects {

    repositories {

        maven { url 'https://repo.codemc.org/repository/nms/' }
        maven { url 'https://plugins.gradle.org/m2/' }
        jcenter()
        mavenLocal()

    }

}

allprojects {

    if (!blacklistedProjects_COMPILE.contains(project.name)) {

        apply plugin: 'com.github.johnrengelman.shadow'
        apply plugin: 'java'
        apply plugin: 'maven-publish'

        group = "com.oop.orangeengine"
        version = "1.0"

        dependencies {

            //Don't require Engine in Engine lmfao
            if (!project.name.equalsIgnoreCase("Engine")) {
                compileOnly project(":Engine")
            }

            if (!blacklistedProjects_SPIGOT.contains(project.name))
                compileOnly "org.spigotmc:spigot:1.12.2-R0.1-SNAPSHOT"

            compileOnly 'org.projectlombok:lombok:1.18.8'
            annotationProcessor 'org.projectlombok:lombok:1.18.8'

        }
        

        if (!blacklistedProjects_COMPILE.contains(project.name)) {

            shadowJar {

                minimize()
                archiveName = "OrangeEngine-${project.name}.jar"

                destinationDirectory = file('../target')
            }

            jar {
                dependsOn shadowJar
                dependsOn publish
            }

            task sourcesJar(type: Jar) {
                from sourceSets.main.allJava
            }

            artifacts {
                archives sourcesJar
            }

            publishing {
                publications {
                    mavenJava(MavenPublication) {
                        from components.java
                        artifact sourcesJar

                        group = project.group
                        artifactId = project.name
                        version = project.version

                        pom {
                            url = 'oopdevelopment.com'
                            developers {
                                developer {
                                    id = 'OOP-778'
                                    email = 'oskardhavel@gmail.com'
                                }
                            }

                        }
                    }
                }
                repositories {
                    if (project.hasProperty('mavenUsername') && project.hasProperty('mavenPassword')) {
                        maven {
                            credentials {
                                username project.mavenUsername
                                password project.mavenPassword
                            }

                            def releasesRepoUrl = 'https://repo.codemc.org/repository/maven-releases/'
                            def snapshotsRepoUrl = 'https://repo.codemc.org/repository/maven-snapshots/'
                            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                        }
                    }
                }

            }

        }

    }

}